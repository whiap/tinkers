# Refactoring to Patterns
> 模式描述了不断重复发生的问题以及该问题的核心解决方案，通过复用该方案来避免重复劳动。-- Christopher Alexander

- 面向对象
    - 底层思维：语言构造、编译转换、内存模型、运行时机制 (封装、继承、多态)
    - 抽象思维：面向对象、组件封装、设计模式、架构模式 (可复用的面向对象设计：应对变化、提高复用)

- 如何解决复杂性：分解 & 抽象
    - 隔离变化：宏观层面上，面向对象更能适应软件变化的，降低变化对架构的影响；
    - 各司其职：微观层面上，面向对象更强调各个类的责任，减少对原先代码的影响；

- 八大设计原则（依赖设计原则推导设计模式）
    - 依赖倒置原则(DIP) -- 变化依赖于稳定, 隔离变化细节 
        - 高层模块不应该依赖于低层模块，二者都应该依赖于抽象;
        - 抽象不应该依赖于实现细节，实现细节应该依赖于抽象。
    - 开放封闭原则(OCP) 
        - 对扩展开放，对更改封闭；
        - 类模块应该是可扩展，但是不可修改。
    - 单一职责原则(SRP)
        - 一个类应该仅有一个引起它变换的原因；
        - 变化的方向隐含着类的责任。
    - 里氏替换原则(LSP)
        - 子类必须能够替换它们的基类(IS-A)
        - 继承表达类型抽象。
    - 接口隔离原则(ISP)
        - 接口应该小而完备
    - 优先使用对象组合，而不是类继承
        - 类继承通常为白箱复用，对象组合通常为黑箱复用；
        - 子类和父类的耦合度高，对象组合的耦合度低。
    - 封装变化点
        - 使用封装来创建对象之间的分界层；
    - 面向接口编程而不是面向实现编程
        - 系统松耦合，分工明确，职责分明。

- **模版方法**定义一个操作中的算法骨架（稳定），而将一些步骤延迟（变化）到子类中。Template Method使得子类可以复用一个算法的结构即可Override该算法的某些特定步骤。(早绑定-> 晚绑定)











